[
  {
    "nodes": [
      0
    ],
    "node_names": [
      "transpose_0"
    ],
    "group_id": 0,
    "input_desc": [
      [
        0,
        0
      ]
    ],
    "output_desc": [
      [
        0,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group0(half* __restrict__ p0, half* __restrict__ T_transpose) {\n  \n  T_transpose[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2))] = p0[((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3))];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 16)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1024)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 32)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2048)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 48)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3072)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 8192)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 8)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 8208)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1032)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 8224)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2056)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 8240)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3080)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 16384)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 16)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 16400)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1040)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 16416)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2064)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 16432)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3088)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 24576)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 24)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 24592)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1048)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 24608)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2072)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 24624)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3096)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 32768)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 32)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 32784)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1056)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 32800)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2080)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 32816)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3104)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 40960)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 40)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 40976)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1064)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 40992)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2088)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 41008)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3112)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 49152)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 48)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 49168)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1072)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 49184)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2096)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 49200)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3120)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 57344)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 56)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 57360)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1080)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 57376)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2104)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 57392)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3128)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 1)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 64)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 17)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1088)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 33)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2112)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 49)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3136)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 8193)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 72)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 8209)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1096)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 8225)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2120)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 8241)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3144)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 16385)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 80)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 16401)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1104)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 16417)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2128)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 16433)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3152)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 24577)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 88)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 24593)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1112)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 24609)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2136)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 24625)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3160)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 32769)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 96)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 32785)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1120)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 32801)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2144)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 32817)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3168)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 40961)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 104)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 40977)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1128)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 40993)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2152)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 41009)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3176)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 49153)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 112)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 49169)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1136)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 49185)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2160)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 49201)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3184)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 57345)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 120)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 57361)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 1144)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 57377)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 2168)];\n  T_transpose[((((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + (((((int)blockIdx.x) & 255) >> 4) * 65536)) + (((((int)threadIdx.x) & 63) >> 3) * 1024)) + ((((int)blockIdx.x) & 15) * 64)) + ((((int)threadIdx.x) & 7) * 2)) + 57393)] = p0[(((((((((int)blockIdx.x) >> 8) * 2097152) + ((((int)threadIdx.x) >> 6) * 1048576)) + ((((int)blockIdx.x) & 255) * 4096)) + ((((int)threadIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 63) >> 3)) + 3192)];\n}\n\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      2048,
      1,
      1
    ],
    "latency": 0.11453570425510406,
    "name": "Group0",
    "gain": 0
  },
  {
    "nodes": [
      1
    ],
    "node_names": [
      "welder_matmul_divide_1"
    ],
    "group_id": 1,
    "input_desc": [
      [
        1,
        0
      ],
      [
        1,
        1
      ]
    ],
    "output_desc": [
      [
        1,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group1(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_divide) {\n  \n  nvcuda::wmma::fragment<nvcuda::wmma::accumulator, 8, 32, 16, half> T_matmul_wmma_accumulator[16];\n  __shared__ half p0_shared[5120];\n  __shared__ half p1_shared[17408];\n  nvcuda::wmma::fragment<nvcuda::wmma::matrix_a, 8, 32, 16, half, nvcuda::wmma::row_major> p0_shared_wmma_matrix_a[8];\n  nvcuda::wmma::fragment<nvcuda::wmma::matrix_b, 8, 32, 16, half, nvcuda::wmma::row_major> p1_shared_wmma_matrix_b[4];\n  for (int i1_c_outer_init = 0; i1_c_outer_init < 2; ++i1_c_outer_init) {\n    for (int i2_c_outer_init = 0; i2_c_outer_init < 4; ++i2_c_outer_init) {\n      for (int i3_c_outer_init = 0; i3_c_outer_init < 2; ++i3_c_outer_init) {\n        nvcuda::wmma::fill_fragment(T_matmul_wmma_accumulator[(((i1_c_outer_init * 8) + (i2_c_outer_init * 2)) + i3_c_outer_init)], __float2half_rn(0.000000e+00f));\n      }\n    }\n  }\n  for (int k_outer = 0; k_outer < 2; ++k_outer) {\n    __syncthreads();\n    *(uint4*)(p0_shared + (((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8))) = *(uint4*)(p0 + (((((((((int)blockIdx.x) >> 7) * 131072) + (((((int)blockIdx.x) & 127) >> 3) * 4096)) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)));\n    *(uint4*)(p0_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 1280)) = *(uint4*)(p0 + ((((((((((int)blockIdx.x) >> 7) * 131072) + (((((int)blockIdx.x) & 127) >> 3) * 4096)) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 2048));\n    *(uint4*)(p0_shared + ((((((int)threadIdx.y) * 320) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 2560)) = *(uint4*)(p0 + ((((((((((int)blockIdx.x) >> 7) * 131072) + (((((int)blockIdx.x) & 127) >> 3) * 4096)) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 65536));\n    *(uint4*)(p0_shared + (((((((((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 3072) >> 11) * 2560) + (((int)threadIdx.y) * 320)) + ((((int)threadIdx.x) >> 2) * 40)) + ((((int)threadIdx.x) & 3) * 8)) + 1280)) = *(uint4*)(p0 + (((((((((((int)blockIdx.x) >> 7) * 131072) + (((((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 3072) >> 11) * 65536)) + (((((int)blockIdx.x) & 127) >> 3) * 4096)) + (((int)threadIdx.y) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + (k_outer * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 2048));\n    *(uint4*)(p1_shared + (((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8))) = *(uint4*)(p1 + (((((((((int)blockIdx.x) >> 7) * 131072) + (k_outer * 32768)) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)));\n    *(uint4*)(p1_shared + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 1088)) = *(uint4*)(p1 + ((((((((((int)blockIdx.x) >> 7) * 131072) + (k_outer * 32768)) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 8192));\n    *(uint4*)(p1_shared + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(p1 + ((((((((((int)blockIdx.x) >> 7) * 131072) + (k_outer * 32768)) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 16384));\n    *(uint4*)(p1_shared + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 3264)) = *(uint4*)(p1 + ((((((((((int)blockIdx.x) >> 7) * 131072) + (k_outer * 32768)) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 24576));\n    *(uint4*)(p1_shared + ((((((int)threadIdx.y) * 272) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 4352)) = *(uint4*)(p1 + ((((((((((int)blockIdx.x) >> 7) * 131072) + (k_outer * 32768)) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 65536));\n    *(uint4*)(p1_shared + (((((((((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 5120) >> 12) * 4352) + (((int)threadIdx.y) * 272)) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 1088)) = *(uint4*)(p1 + (((((((((((int)blockIdx.x) >> 7) * 131072) + (((((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 5120) >> 12) * 65536)) + (k_outer * 32768)) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 8192));\n    *(uint4*)(p1_shared + (((((((((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 6144) >> 12) * 4352) + (((int)threadIdx.y) * 272)) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 2176)) = *(uint4*)(p1 + (((((((((((int)blockIdx.x) >> 7) * 131072) + (((((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 6144) >> 12) * 65536)) + (k_outer * 32768)) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 16384));\n    *(uint4*)(p1_shared + (((((((((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 7168) >> 12) * 4352) + (((int)threadIdx.y) * 272)) + ((((int)threadIdx.x) >> 4) * 136)) + ((((int)threadIdx.x) & 15) * 8)) + 3264)) = *(uint4*)(p1 + (((((((((((int)blockIdx.x) >> 7) * 131072) + (((((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 8)) + 7168) >> 12) * 65536)) + (k_outer * 32768)) + (((int)threadIdx.y) * 2048)) + ((((int)threadIdx.x) >> 4) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8)) + 24576));\n    __syncthreads();\n    for (int k_inner_outer = 0; k_inner_outer < 2; ++k_inner_outer) {\n      for (int ax1_outer = 0; ax1_outer < 2; ++ax1_outer) {\n        for (int ax2_outer = 0; ax2_outer < 4; ++ax2_outer) {\n          nvcuda::wmma::load_matrix_sync(p0_shared_wmma_matrix_a[((ax1_outer * 4) + ax2_outer)], (&(p0_shared[((((ax1_outer * 2560) + ((((int)threadIdx.y) >> 1) * 1280)) + (ax2_outer * 320)) + (k_inner_outer * 16))])), 40);\n        }\n      }\n      for (int ax1_outer_1 = 0; ax1_outer_1 < 2; ++ax1_outer_1) {\n        for (int ax3_outer = 0; ax3_outer < 2; ++ax3_outer) {\n          nvcuda::wmma::load_matrix_sync(p1_shared_wmma_matrix_b[((ax1_outer_1 * 2) + ax3_outer)], (&(p1_shared[((((ax1_outer_1 * 4352) + (k_inner_outer * 2176)) + ((((int)threadIdx.y) & 1) * 64)) + (ax3_outer * 32))])), 136);\n        }\n      }\n      for (int i1_c_outer = 0; i1_c_outer < 2; ++i1_c_outer) {\n        for (int i2_c_outer = 0; i2_c_outer < 4; ++i2_c_outer) {\n          for (int i3_c_outer = 0; i3_c_outer < 2; ++i3_c_outer) {\n            nvcuda::wmma::mma_sync(T_matmul_wmma_accumulator[(((i1_c_outer * 8) + (i2_c_outer * 2)) + i3_c_outer)], p0_shared_wmma_matrix_a[((i1_c_outer * 4) + i2_c_outer)], p1_shared_wmma_matrix_b[((i1_c_outer * 2) + i3_c_outer)], T_matmul_wmma_accumulator[(((i1_c_outer * 8) + (i2_c_outer * 2)) + i3_c_outer)]);\n          }\n        }\n      }\n    }\n  }\n  __syncthreads();\n  for (int ax1_inner_outer = 0; ax1_inner_outer < 2; ++ax1_inner_outer) {\n    for (int ax2_inner_outer = 0; ax2_inner_outer < 4; ++ax2_inner_outer) {\n      for (int ax3_inner_outer = 0; ax3_inner_outer < 2; ++ax3_inner_outer) {\n        nvcuda::wmma::store_matrix_sync((&(p1_shared[(((((ax1_inner_outer * 8704) + ((((int)threadIdx.y) >> 1) * 4352)) + (ax2_inner_outer * 1088)) + ((((int)threadIdx.y) & 1) * 64)) + (ax3_inner_outer * 32))])), T_matmul_wmma_accumulator[(((ax1_inner_outer * 8) + (ax2_inner_outer * 2)) + ax3_inner_outer)], 136, nvcuda::wmma::mem_row_major);\n      }\n    }\n  }\n  __syncthreads();\n  for (int ax0_inner_ax1_inner_fused_ax2_inner_fused_ax3_inner_fused_outer_outer_outer = 0; ax0_inner_ax1_inner_fused_ax2_inner_fused_ax3_inner_fused_outer_outer_outer < 16; ++ax0_inner_ax1_inner_fused_ax2_inner_fused_ax3_inner_fused_outer_outer_outer) {\n    uint4 __1;\n      uint4 v_ = *(uint4*)(p1_shared + ((((ax0_inner_ax1_inner_fused_ax2_inner_fused_ax3_inner_fused_outer_outer_outer >> 3) * 8704) + (((((ax0_inner_ax1_inner_fused_ax2_inner_fused_ax3_inner_fused_outer_outer_outer * 8) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) & 63) * 136)) + ((((int)threadIdx.x) & 15) * 8)));\n      uint4 v__1 = make_uint4(__pack_half2(__float2half_rn(1.250000e-01f), __float2half_rn(1.250000e-01f)), __pack_half2(__float2half_rn(1.250000e-01f), __float2half_rn(1.250000e-01f)), __pack_half2(__float2half_rn(1.250000e-01f), __float2half_rn(1.250000e-01f)), __pack_half2(__float2half_rn(1.250000e-01f), __float2half_rn(1.250000e-01f)));\n      ((half2*)(&(__1.x)))->x = (((half2*)(&(v_.x)))->x*((half2*)(&(v__1.x)))->x);\n      ((half2*)(&(__1.x)))->y = (((half2*)(&(v_.x)))->y*((half2*)(&(v__1.x)))->y);\n      ((half2*)(&(__1.y)))->x = (((half2*)(&(v_.y)))->x*((half2*)(&(v__1.y)))->x);\n      ((half2*)(&(__1.y)))->y = (((half2*)(&(v_.y)))->y*((half2*)(&(v__1.y)))->y);\n      ((half2*)(&(__1.z)))->x = (((half2*)(&(v_.z)))->x*((half2*)(&(v__1.z)))->x);\n      ((half2*)(&(__1.z)))->y = (((half2*)(&(v_.z)))->y*((half2*)(&(v__1.z)))->y);\n      ((half2*)(&(__1.w)))->x = (((half2*)(&(v_.w)))->x*((half2*)(&(v__1.w)))->x);\n      ((half2*)(&(__1.w)))->y = (((half2*)(&(v_.w)))->y*((half2*)(&(v__1.w)))->y);\n    *(uint4*)(T_divide + (((((((((int)blockIdx.x) >> 7) * 2097152) + ((ax0_inner_ax1_inner_fused_ax2_inner_fused_ax3_inner_fused_outer_outer_outer >> 3) * 1048576)) + (((((int)blockIdx.x) & 127) >> 3) * 65536)) + (((((ax0_inner_ax1_inner_fused_ax2_inner_fused_ax3_inner_fused_outer_outer_outer * 8) + (((int)threadIdx.y) * 2)) + (((int)threadIdx.x) >> 4)) & 63) * 1024)) + ((((int)blockIdx.x) & 7) * 128)) + ((((int)threadIdx.x) & 15) * 8))) = __1;\n  }\n}\n\n",
    "block_size": [
      32,
      4,
      1
    ],
    "grid_size": [
      16384,
      1,
      1
    ],
    "latency": 1.078148365020752,
    "name": "Group1",
    "gain": 0
  },
  {
    "nodes": [
      2,
      3,
      4,
      5
    ],
    "node_names": [
      "max_2",
      "subtract_exp_3",
      "sum_4",
      "divide_5"
    ],
    "group_id": 2,
    "input_desc": [
      [
        3,
        0
      ],
      [
        2,
        0
      ]
    ],
    "output_desc": [
      [
        5,
        0
      ]
    ],
    "code": "__device__ void Group2_0_max_2(half* __restrict__ p0, half* __restrict__ p0_red, char* shared) {\n  half normal_reduce_temp0[1];\n  half* p0_shared = (half*)(shared+0);\n  __shared__ half red_buf0[128];\n  normal_reduce_temp0[0] = __float2half_rn(-6.550400e+04f);\n  *(uint4*)(p0_shared + (((int)threadIdx.x) * 8)) = *(uint4*)(p0 + ((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 8)));\n  __syncthreads();\n  for (int k3_inner_outer = 0; k3_inner_outer < 8; ++k3_inner_outer) {\n    normal_reduce_temp0[0] = max(normal_reduce_temp0[0], p0_shared[((k3_inner_outer * 128) + ((int)threadIdx.x))]);\n  }\n  __syncthreads();\n  ((volatile half*)red_buf0)[((int)threadIdx.x)] = normal_reduce_temp0[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = max((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]), (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 64)]));\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = max((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]), (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 32)]));\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    half w_16_0 = max((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]), (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 16)]));\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = w_16_0;\n    half w_8_0 = max((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]), (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 8)]));\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = w_8_0;\n    half w_4_0 = max((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]), (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 4)]));\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = w_4_0;\n    half w_2_0 = max((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]), (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 2)]));\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = w_2_0;\n    half w_1_0 = max((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]), (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 1)]));\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = w_1_0;\n  }\n  __syncthreads();\n  __syncthreads();\n  p0_red[0] = (half)(((volatile half*)red_buf0)[0]);\n  __syncthreads();\n}\n\n__device__ void Group2_1_subtract_exp_3(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_exp, char* shared) {\n  half* p1_shared = (half*)p1;\n  half p1_shared_local[1];\n  p1_shared_local[0] = p1_shared[0];\n  __syncthreads();\n  T_exp[(((int)threadIdx.x) * 2)] = hexp((p0[((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2))] - p1_shared_local[0]));\n  T_exp[((((int)threadIdx.x) * 2) + 256)] = hexp((p0[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 256)] - p1_shared_local[0]));\n  T_exp[((((int)threadIdx.x) * 2) + 512)] = hexp((p0[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 512)] - p1_shared_local[0]));\n  T_exp[((((int)threadIdx.x) * 2) + 768)] = hexp((p0[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 768)] - p1_shared_local[0]));\n  T_exp[((((int)threadIdx.x) * 2) + 1)] = hexp((p0[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 1)] - p1_shared_local[0]));\n  T_exp[((((int)threadIdx.x) * 2) + 257)] = hexp((p0[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 257)] - p1_shared_local[0]));\n  T_exp[((((int)threadIdx.x) * 2) + 513)] = hexp((p0[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 513)] - p1_shared_local[0]));\n  T_exp[((((int)threadIdx.x) * 2) + 769)] = hexp((p0[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 769)] - p1_shared_local[0]));\n  __syncthreads();\n}\n\n__device__ void Group2_2_sum_4(half* __restrict__ p0, half* __restrict__ p0_red, char* shared) {\n  half normal_reduce_temp0[1];\n  half* p0_shared = (half*)p0;\n  __shared__ half red_buf0[128];\n  normal_reduce_temp0[0] = __float2half_rn(0.000000e+00f);\n  for (int k3_inner_outer = 0; k3_inner_outer < 8; ++k3_inner_outer) {\n    normal_reduce_temp0[0] = (normal_reduce_temp0[0] + p0_shared[((k3_inner_outer * 128) + ((int)threadIdx.x))]);\n  }\n  __syncthreads();\n  ((volatile half*)red_buf0)[((int)threadIdx.x)] = normal_reduce_temp0[0];\n  __syncthreads();\n  if (((int)threadIdx.x) < 64) {\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = ((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]) + (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 64)]));\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 32) {\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = ((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]) + (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 32)]));\n  }\n  __syncthreads();\n  if (((int)threadIdx.x) < 16) {\n    half w_16_0 = ((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]) + (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 16)]));\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = w_16_0;\n    half w_8_0 = ((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]) + (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 8)]));\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = w_8_0;\n    half w_4_0 = ((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]) + (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 4)]));\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = w_4_0;\n    half w_2_0 = ((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]) + (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 2)]));\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = w_2_0;\n    half w_1_0 = ((half)(((volatile half*)red_buf0)[((int)threadIdx.x)]) + (half)(((volatile half*)red_buf0)[(((int)threadIdx.x) + 1)]));\n    ((volatile half*)red_buf0)[((int)threadIdx.x)] = w_1_0;\n  }\n  __syncthreads();\n  __syncthreads();\n  p0_red[0] = (half)(((volatile half*)red_buf0)[0]);\n  __syncthreads();\n}\n\n__device__ void Group2_3_divide_5(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_divide, char* shared) {\n  half* p0_shared = (half*)p0;\n  half* p1_shared = (half*)p1;\n  T_divide[((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2))] = (p0_shared[(((int)threadIdx.x) * 2)] / p1_shared[0]);\n  T_divide[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 256)] = (p0_shared[((((int)threadIdx.x) * 2) + 256)] / p1_shared[0]);\n  T_divide[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 512)] = (p0_shared[((((int)threadIdx.x) * 2) + 512)] / p1_shared[0]);\n  T_divide[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 768)] = (p0_shared[((((int)threadIdx.x) * 2) + 768)] / p1_shared[0]);\n  T_divide[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 1)] = (p0_shared[((((int)threadIdx.x) * 2) + 1)] / p1_shared[0]);\n  T_divide[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 257)] = (p0_shared[((((int)threadIdx.x) * 2) + 257)] / p1_shared[0]);\n  T_divide[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 513)] = (p0_shared[((((int)threadIdx.x) * 2) + 513)] / p1_shared[0]);\n  T_divide[(((((int)blockIdx.x) * 1024) + (((int)threadIdx.x) * 2)) + 769)] = (p0_shared[((((int)threadIdx.x) * 2) + 769)] / p1_shared[0]);\n}\n\n__global__ void __launch_bounds__(128) Group2(half* input0, half* input1, half* output0) {\n  __shared__ char shared[2080];\n  Group2_0_max_2(input1, (half*)(shared+0), shared+0);\n  Group2_1_subtract_exp_3(input0, (half*)(shared+0), (half*)(shared+0), shared+32);\n  Group2_2_sum_4((half*)(shared+0), (half*)(shared+2048), shared+2048);\n  Group2_3_divide_5((half*)(shared+0), (half*)(shared+2048), output0, shared+2080);\n}\n",
    "block_size": [
      128,
      1,
      1
    ],
    "grid_size": [
      262144,
      1,
      1
    ],
    "latency": 2.7053706645965576,
    "name": "Group2",
    "gain": 2.7594608664512634
  },
  {
    "nodes": [
      6
    ],
    "node_names": [
      "welder_matmul_6"
    ],
    "group_id": 3,
    "input_desc": [
      [
        6,
        0
      ],
      [
        6,
        1
      ]
    ],
    "output_desc": [
      [
        6,
        0
      ]
    ],
    "code": "__global__ void __launch_bounds__(128) Group3(half* __restrict__ p0, half* __restrict__ p1, half* __restrict__ T_matmul) {\n  \n    __shared__ half p0_shared[2048];\n  __shared__ half p1_shared[4096];\n  ALLOCATE_CUTLASS_OBJECT(T_matmul_cutlass_warp_mma, cutlass::gemm::warp::GemmTensorOp<\n    cutlass::gemm::GemmShape<16, 32, 32>,\n    cutlass::layout::RowMajorTensorOpMultiplicandCrosswise<16, 32>,\n    cutlass::layout::RowMajorTensorOpMultiplicandCongruous<16, 64>\n>((((int)threadIdx.y) >> 1), (((int)threadIdx.y) & 1), ((int)threadIdx.x)));\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0 = 0; ax0_ax1_fused_0_0_0 < 1; ++ax0_ax1_fused_0_0_0) {\n\n  {\n    unsigned int addr;\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p0_shared + ((((((int)threadIdx.y) * 256) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p0 + ((((((int)blockIdx.x) * 32768) + (((int)threadIdx.y) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + ((((int)threadIdx.x) & 3) * 8)))), \"n\"(16)\n    );\n  }\n  }\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0_1 = 0; ax0_ax1_fused_0_0_0_1 < 2; ++ax0_ax1_fused_0_0_0_1) {\n\n  {\n    unsigned int addr;\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p1_shared + ((((((ax0_ax1_fused_0_0_0_1 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 3) * 64)) + (((((((int)threadIdx.x) & 7) >> 2) + (((int)threadIdx.y) & 1)) & 1) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p1 + (((((((int)blockIdx.x) >> 5) * 65536) + (ax0_ax1_fused_0_0_0_1 * 1024)) + (((int)threadIdx.y) * 256)) + (((int)threadIdx.x) * 8)))), \"n\"(16)\n    );\n  }\n  }\n__asm__ __volatile__(\"cp.async.commit_group;\");\n\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0_2 = 0; ax0_ax1_fused_0_0_0_2 < 1; ++ax0_ax1_fused_0_0_0_2) {\n\n  {\n    unsigned int addr;\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p0_shared + (((((((int)threadIdx.y) * 256) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)) + 1024)))\n    );\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p0 + (((((((int)blockIdx.x) * 32768) + (((int)threadIdx.y) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + ((((int)threadIdx.x) & 3) * 8)) + 32))), \"n\"(16)\n    );\n  }\n  }\n  #pragma unroll\n  for (int ax0_ax1_fused_0_0_0_3 = 0; ax0_ax1_fused_0_0_0_3 < 2; ++ax0_ax1_fused_0_0_0_3) {\n\n  {\n    unsigned int addr;\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p1_shared + (((((((ax0_ax1_fused_0_0_0_3 * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 3) * 64)) + (((((((int)threadIdx.x) & 7) >> 2) + (((int)threadIdx.y) & 1)) & 1) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8)) + 2048)))\n    );\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p1 + ((((((((int)blockIdx.x) >> 5) * 65536) + (ax0_ax1_fused_0_0_0_3 * 1024)) + (((int)threadIdx.y) * 256)) + (((int)threadIdx.x) * 8)) + 2048))), \"n\"(16)\n    );\n  }\n  }\n__asm__ __volatile__(\"cp.async.commit_group;\");\n\n__asm__ __volatile__(\"cp.async.wait_group 1;\");\n\n  __syncthreads();\n  call_cutlass_mma_prologue(T_matmul_cutlass_warp_mma, (&(p0_shared[0])), (&(p1_shared[0])), 32, 64);\n  call_cutlass_mma_body(T_matmul_cutlass_warp_mma);\n  for (int k_0 = 0; k_0 < 30; ++k_0) {\n    #pragma unroll\n    for (int ax0_ax1_fused_0_0_0_4 = 0; ax0_ax1_fused_0_0_0_4 < 1; ++ax0_ax1_fused_0_0_0_4) {\n\n  {\n    unsigned int addr;\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p0_shared + ((((((k_0 & 1) * 1024) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 2) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p0 + ((((((((int)blockIdx.x) * 32768) + (((int)threadIdx.y) * 8192)) + ((((int)threadIdx.x) >> 2) * 1024)) + (k_0 * 32)) + ((((int)threadIdx.x) & 3) * 8)) + 64))), \"n\"(16)\n    );\n  }\n    }\n    #pragma unroll\n    for (int ax0_ax1_fused_0_0_0_5 = 0; ax0_ax1_fused_0_0_0_5 < 2; ++ax0_ax1_fused_0_0_0_5) {\n\n  {\n    unsigned int addr;\n    __asm__ __volatile__(\n      \"{ .reg .u64 addr; cvta.to.shared.u64 addr, %1; cvt.u32.u64 %0, addr; }\\n\"\n      : \"=r\"(addr)\n      : \"l\"((void *)(p1_shared + ((((((((k_0 & 1) * 2048) + (ax0_ax1_fused_0_0_0_5 * 1024)) + (((int)threadIdx.y) * 256)) + ((((int)threadIdx.x) >> 3) * 64)) + (((((((int)threadIdx.x) & 7) >> 2) + (((int)threadIdx.y) & 1)) & 1) * 32)) + ((((((int)threadIdx.x) >> 4) + ((((int)threadIdx.x) & 3) >> 1)) & 1) * 16)) + (((((((int)threadIdx.x) & 15) >> 3) + (((int)threadIdx.x) & 1)) & 1) * 8))))\n    );\n    __asm__ __volatile__(\n      #if TVM_ENABLE_L2_PREFETCH\n        \"cp.async.cg.shared.global.L2::128B [%0], [%1], %2;\"\n      #else\n        \"cp.async.cg.shared.global [%0], [%1], %2;\"\n      #endif\n        :: \"r\"(addr), \"l\"((void*)(p1 + (((((((((int)blockIdx.x) >> 5) * 65536) + (k_0 * 2048)) + (ax0_ax1_fused_0_0_0_5 * 1024)) + (((int)threadIdx.y) * 256)) + (((int)threadIdx.x) * 8)) + 4096))), \"n\"(16)\n    );\n  }\n    }\n__asm__ __volatile__(\"cp.async.commit_group;\");\n\n__asm__ __volatile__(\"cp.async.wait_group 1;\");\n\n    __syncthreads();\n    call_cutlass_mma_prologue(T_matmul_cutlass_warp_mma, (&(p0_shared[(((k_0 + 1) & 1) * 1024)])), (&(p1_shared[(((k_0 + 1) & 1) * 2048)])), 32, 64);\n    call_cutlass_mma_epilogue(T_matmul_cutlass_warp_mma);\n    call_cutlass_mma_body(T_matmul_cutlass_warp_mma);\n  }\n__asm__ __volatile__(\"cp.async.wait_group 0;\");\n\n  __syncthreads();\n  call_cutlass_mma_prologue(T_matmul_cutlass_warp_mma, (&(p0_shared[1024])), (&(p1_shared[2048])), 32, 64);\n  call_cutlass_mma_epilogue(T_matmul_cutlass_warp_mma);\n  call_cutlass_mma_body(T_matmul_cutlass_warp_mma);\n  call_cutlass_mma_epilogue(T_matmul_cutlass_warp_mma);\n  #pragma unroll\n  for (int ax1_0 = 0; ax1_0 < 8; ++ax1_0) {\n    *(uint1*)(T_matmul + (((((((((int)blockIdx.x) * 2048) + ((((int)threadIdx.y) >> 1) * 1024)) + ((ax1_0 & 1) * 512)) + ((((int)threadIdx.x) >> 2) * 64)) + ((((int)threadIdx.y) & 1) * 32)) + ((ax1_0 >> 1) * 8)) + ((((int)threadIdx.x) & 3) * 2))) = *(uint1*)(T_matmul_cutlass_warp_mma + (ax1_0 * 2));\n  }\n}\n\n",
    "block_size": [
      32,
      4,
      1
    ],
    "grid_size": [
      8192,
      1,
      1
    ],
    "latency": 0.9514880180358887,
    "name": "Group3",
    "gain": 0
  }
]